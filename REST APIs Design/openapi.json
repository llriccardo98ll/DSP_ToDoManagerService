{
  "openapi": "3.0.1",
  "info": {
    "title": "Swagger ToDo Manager",
    "description": "The ToDo Manager service allows users to keep track informtion about the tasks they should carry out",
    "termsOfService": "http://swagger.io/terms/",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://todomanager.swagger.io/v2"
    },
    {
      "url": "http://todomanager.swagger.io/v2"
    }
  ],
  "tags": [
    {
      "name": "tasks",
      "description": ""
    },
    {
      "name": "users",
      "description": ""
    },
    {
      "name": "users/authenticator",
      "description": ""
    }
  ],
  "paths": {
    "/api/tasks": {
      "post": {
        "tags": [
          "tasks"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Add a new task to the store",
        "operationId": "addTask",
        "requestBody": {
          "description": "Task object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/tasks/public": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Return the public tasks",
        "description": "The operation to retrieve the list of all task are marked as public.\n\nThis operation does not require the authentication.",
        "operationId": "getPublicTasks",
        "parameters": [
          {
            "in": "query",
            "name": "pageNo",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "The id of the requested page (if absent, the first page is returned)"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tasks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/tasks/{taskId}": {
      "put": {
        "tags": [
          "tasks"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Update a task",
        "description": "The task with ID taskId is updated. This operation does not allow to mark a task as completed. This operation can be performed only by the owner.",
        "operationId": "updateSingleTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The updated task object that needs to replace the old object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "tasks"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Retreve a task",
        "description": "The task with ID taskId is retrieved. This operation can be performed on the task if at least one of the following three conditions is satisfied. 1) The task is public. 2) The user who performs the operation is the task's owner. 3) The user who performs the operation is a task's assignee.",
        "operationId": "getSingleTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Delete a task",
        "description": "The task with ID taskId is deleted. This operation can only be performed by the owner.",
        "operationId": "deleteTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation - No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/api/tasks/{taskId}/assignees": {
      "post": {
        "tags": [
          "tasks"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Assign a task to a user",
        "description": "The task with ID taskId is assigned to the user specified in the request body. This operation can only be performed by the owner.",
        "operationId": "assignTaskToUser",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "the user to whom the task is assigned",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful operation - No Content",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "tasks"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Retreve the users a task has been assigned to",
        "description": "The users to whom the task with ID taskId is assigned are retrieved. This operation can be performed only by the owner.",
        "operationId": "getUsersAssigned",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/api/tasks/{taskId}/assignees/{userId}": {
      "delete": {
        "tags": [
          "tasks"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Remove a user from the assigned task",
        "description": "The user that is removed is the user, identified by userId, that was assigned to the task identified by taskId. This operation can be performed only by the owner.",
        "operationId": "removeUser",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the assigned task",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to remove",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation - No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/api/tasks/{taskId}/completion": {
      "put": {
        "tags": [
          "tasks"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Complete a task",
        "description": "The task with ID taskId is marked as completed. This operation can only be performed by an assignee of the task.",
        "operationId": "completeTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation - No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/api/tasks/assignments": {
      "post": {
        "tags": [
          "tasks"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Assign automatically the unassigned tasks in a balanced manner",
        "description": "The tasks, whose owner is the user who performed this request and that are not assigned to any user, are automatically assigned to the users of the service in a balanced manner.",
        "operationId": "assign",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get information about the users",
        "description": "The available information (passwords excluded) about all the users is retrieved.",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/api/users/login": {
      "get": {
        "tags": [
          "users/authenticator"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied",
            "content": {}
          }
        }
      }
    },
    "/api/users/logout": {
      "get": {
        "tags": [
          "users/authenticator"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/api/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get information about a user",
        "description": "The available information (password excluded) about the user specified by userId is retrieved.",
        "operationId": "getSingleUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/api/users/{userId}/tasks/created": {
      "get": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Retrieve the tasks created by the user with ID userId",
        "description": "This operation allows an authenticated user to retrieve the tasks that she has created. A pagination mechanism is implemented to limit the size of messages.",
        "operationId": "getUserTasks",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "pageNo",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "The id of the requested page (if absent, the first page is returned)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalPages": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "tasks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "next": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/api/users/{userId}/tasks/assigned": {
      "get": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Retrieve the tasks assigned to the user with ID userId",
        "description": "This operation allows an authenticated user to retrieve the tasks that has been assigned to her. A pagination mechanism is implemented to limit the size of messages.",
        "operationId": "getAssignedTasks",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "pageNo",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "The id of the requested page (if absent, the first page is returned)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalPages": {
                      "type": "integer"
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "tasks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "next": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Task": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string",
            "description": "path to the JSON Schema to use for the validation of the JSON file describing the task"
          },
          "id": {
            "type": "integer",
            "description": "unique identifier of the task in the ToDo Manager service (mandatory)"
          },
          "description": {
            "type": "string",
            "maxLength": 160,
            "description": "textual description of the task (mandatory, maximum length: 160 characters)"
          },
          "important": {
            "type": "boolean",
            "description": "this Boolean property is set to true if the task is marked as important, false otherwise (default value: false)"
          },
          "private": {
            "type": "boolean",
            "default": true,
            "description": "this Boolean property is set to true if the task is marked as private, false if the task is public (default value: false). \n A task is said private if only the user who created it can get information about it, public if every user can get information about it"
          },
          "projects": {
            "type": "array",
            "description": "the name of the project in which the task is inserted. In the ToDo Manager service, only a predetermined set of the possible values for projects must be accepted (e.g., you can suppose that 'Personal', 'WA1_Project', 'WA2_Project', 'DSP_Project' are th only acceptable values for the projects field)",
            "items": {
              "type": "string",
              "enum": [
                "Personal",
                "WA1_Project",
                "WA2_Project",
                "DPS_Project"
              ]
            }
          },
          "deadline": {
            "type": "string",
            "pattern": "202[0-9]-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])",
            "description": "the due date and hour of the task. The ToDo Manager service must accept only dates following Junary 1st, 2020. The date format must be compliant to the ISO 8601 standard"
          },
          "completed": {
            "type": "boolean",
            "default": false,
            "description": "this Boolean property is set to true if the task is marked as completed, false otherwise (defaul value: false)"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "assignedTo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string",
            "description": "path to the JSON Schema to use for the validation of the JSON file describing the task"
          },
          "id": {
            "type": "integer",
            "description": "unique identifier of the user in the ToDo Manager service (mandatory)"
          },
          "name": {
            "type": "string",
            "description": "username of the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "email address of the user, whitch must be used for the authentication to the service (mandatory, it must be a valid email address)"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "maxLength": 20,
            "description": "the user's password, which must be used for the autentication to the service (the password must be at least 6 characters long and at most 20 characters long)"
          }
        }
      }
    },
    "securitySchemes": {
      "cookieAuth": {
        "description": "JWT to identify the authenticated user.",
        "type": "apiKey",
        "in": "cookie",
        "name": "connect.sid"
      }
    }
  }
}